{"prompt": {"messages": [{"role": "user", "content": "gpiozero is a simple library written in Python as an interface to GPIO devices with Raspberry Pi.\n\nThe following is the PresenceIndicator class from the examples.gpiozero.apps.app_6.src.presence_indicator module, which uses the gpiozero library. You should generate property based tests for this class:\n\n```python\nfrom threading import Thread\nfrom gpiozero import LEDBarGraph\nfrom time import sleep\nimport requests\nclass PresenceIndicator:\n\n    def __init__(self, pins=None, url='', delay=1):\n        self.leds = LEDBarGraph(21, 20, 16, 12, 8, 25, 24, 23, 18, 14)\n        self.leds.off()\n        self.url = url\n        self.delay = delay\n        self.playing = False\n\n    def play(self):\n        self.playing = True\n        while True:\n            if not self.playing:\n                break\n            r = requests.get(self.url)\n            data = r.json()\n            people = data['number']\n            print(people)\n            self.leds.off()\n            self.leds.value = people / 10\n            sleep(self.delay)\n\n    def stop_playing(self):\n        self.playing = False\n\n    def __enter__(self):\n        self.thread = Thread(target=self.play)\n        self.thread.start()\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.stop_playing()\n        self.leds.close()\n```\n\nHere are some unit tests for the PresenceIndicator class:\n\n```python\nfrom gpiozero.pins.mock import MockFactory, MockPWMPin\nfrom examples.gpiozero.apps.app_6.src.presence_indicator import PresenceIndicator\nfrom unittest.mock import patch\nfrom time import sleep\nfrom gpiozero import *\ndef test_leds_value():\n    Device.pin_factory = MockFactory(pin_class=MockPWMPin)\n    with patch('examples.gpiozero.apps.app_6.src.presence_indicator.requests') as MockRequests:\n        MockRequests.get.return_value.json.return_value = {'number': 5}\n        with PresenceIndicator([21, 20, 16, 12, 8, 25, 24, 23, 18, 14]) as pi:\n            sleep(1)\n            assert pi.leds.value == 0.5\n```\n\nTo generate property based tests for the PresenceIndicator class, you should mock the pin factory as follows:\n\n```python\ndef test_propertyX():\n    # Create a MockFactory and use it as pin_factory on Device\n    Device.pin_factory = MockFactory(pin_class=MockPWMPin)\n```\n\nGenerate property based tests for the PresenceIndicator class according to the following steps:\n1- Based on the class code and comments, extract the properties of the class.\n2- Use the unit tests to understand the behavior of the class.\n3- Based on the extracted properties and your understanding of the class behavior, use the hypothesis library to generate property based tests. In your tests, mock the pin factory as shown in the example above."}], "temp": 0, "sample_size": 1, "model": "google/gemini-2.0-flash-lite-preview-02-05:free"}, "response": {"samples": [{"content": "```python\nfrom gpiozero.pins.mock import MockFactory, MockPWMPin\nfrom examples.gpiozero.apps.app_6.src.presence_indicator import PresenceIndicator\nfrom unittest.mock import patch\nfrom time import sleep\nfrom gpiozero import *\nfrom hypothesis import given, strategies as st\nfrom hypothesis import settings\n\n# 1. Extract Properties:\n#    - `pins`:  GPIO pins for the LEDBarGraph.  Initialized in __init__ and not directly modifiable later.\n#    - `url`:  URL for the API endpoint to fetch presence data.  Specified in __init__, used in `play()`.\n#    - `delay`:  Delay between API calls (in seconds). Specified in __init__, used in `play()`.\n#    - `leds`:  An LEDBarGraph object representing the LED bar.  Initialized in __init__, used and controlled in play() and __exit__.  Value is controlled in play() and set to off in init and exit.\n#    - `playing`: A boolean flag to control the execution of `play()`. Set in init, modified through `play()` and `stop_playing()`, affecting thread execution.\n\n# 2. Understand Behavior (from provided test and code):\n#    - Upon initialization, the LED bar is turned off.\n#    - `play()`:\n#        - Continuously fetches presence data (a number) from the specified URL.\n#        - Converts the number to a value between 0 and 1 (divided by 10).\n#        - Sets the `leds.value` to map the presence data to the LED bar's illumination level by scaling the number received from the provided API to a value 0-1.\n#        - Pauses for the specified delay.\n#        - Stops if `playing` is set to False and the loop breaks.\n#    - `stop_playing()`: Sets `playing` to `False`, stopping the thread.\n#    - `__enter__`: Starts a thread that executes `play()`. Returns self.\n#    - `__exit__`: Calls `stop_playing()` (to stop playing) and turns off the leds.\n\n# 3. Generate Property-Based tests:\n\n# Property 1: Initialization - LEDs are initially off.\n@settings(max_examples=10)\n@given(st.floats(min_value=0.1, max_value=5.0), st.integers(min_value=1, max_value=99999))\n@patch('examples.gpiozero.apps.app_6.src.presence_indicator.requests')\ndef test_initialization_leds_off(mock_requests, delay, number):\n    Device.pin_factory = MockFactory(pin_class=MockPWMPin)\n    mock_requests.get.return_value.json.return_value = {'number': number}\n    with PresenceIndicator(url=\"http://example.com\", delay=delay) as pi:\n        sleep(0.1) # Give time for the thread to run and update leds.value\n        assert pi.leds.value == number / 10 if number <= 10 else 1\n        assert pi.playing == True # Verify that the playing flag is set to True at this point\n\n# Property 2:  `leds.value` is directly proportional to the returned number (scaled) within constraints.  This is tested in the initial unit test.\n@settings(max_examples=10)\n@given(st.floats(min_value=0.1, max_value=5.0), st.integers(min_value=0, max_value=100))\n@patch('examples.gpiozero.apps.app_6.src.presence_indicator.requests')\ndef test_leds_value_proportional_to_number(mock_requests, delay, number_returned):\n    Device.pin_factory = MockFactory(pin_class=MockPWMPin)\n    mock_requests.get.return_value.json.return_value = {'number': number_returned}\n    with PresenceIndicator(url=\"http://example.com\", delay=delay) as pi:\n        sleep(0.1)  # Allow time for the value to be propagated\n        expected_value = min(number_returned / 10,  1.0)\n        assert abs(pi.leds.value - expected_value) < 1e-6  # Allow for floating point precision\n\n\n# Property 3: `stop_playing()` sets `playing` to False and hence the thread ends\n@settings(max_examples=10)\n@given(st.floats(min_value=0.1, max_value=5.0), st.integers(min_value=1, max_value=99999))\n@patch('examples.gpiozero.apps.app_6.src.presence_indicator.requests')\ndef test_stop_playing_sets_playing_to_false(mock_requests, delay, number):\n    Device.pin_factory = MockFactory(pin_class=MockPWMPin)\n    mock_requests.get.return_value.json.return_value = {'number': number}\n\n    with PresenceIndicator(url=\"http://example.com\", delay=delay) as pi:\n        sleep(0.1)\n        pi.stop_playing()\n        sleep(0.1)\n        assert pi.playing == False\n\n# Property 4:  `__exit__` turns the leds off.\n@settings(max_examples=10)\n@given(st.floats(min_value=0.1, max_value=5.0), st.integers(min_value=0, max_value=100))\n@patch('examples.gpiozero.apps.app_6.src.presence_indicator.requests')\ndef test_exit_turns_leds_off(mock_requests, delay, number_returned):\n    Device.pin_factory = MockFactory(pin_class=MockPWMPin)\n    mock_requests.get.return_value.json.return_value = {'number': number_returned}\n\n    with PresenceIndicator(url=\"http://example.com\", delay=delay) as pi:\n        sleep(0.1)  # Run play() briefly\n    assert pi.leds.value == 0 # verifies that the led value is zero.\n```"}]}, "invocation_time": 1739793069.169087}